// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raftcore {

namespace {

const ::google::protobuf::Descriptor* LogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntries_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendEntriesRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendEntriesRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVote_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVoteRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVoteRes_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* RaftCoreService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_2eproto() {
  protobuf_AddDesc_raft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft.proto");
  GOOGLE_CHECK(file != NULL);
  LogEntry_descriptor_ = file->message_type(0);
  static const int LogEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, config_),
  };
  LogEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntry_descriptor_,
      LogEntry::default_instance_,
      LogEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntry));
  AppendEntries_descriptor_ = file->message_type(1);
  static const int AppendEntries_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, prev_log_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, leader_commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, id_),
  };
  AppendEntries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntries_descriptor_,
      AppendEntries::default_instance_,
      AppendEntries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntries));
  AppendEntriesRes_descriptor_ = file->message_type(2);
  static const int AppendEntriesRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRes, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRes, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRes, match_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRes, id_),
  };
  AppendEntriesRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendEntriesRes_descriptor_,
      AppendEntriesRes::default_instance_,
      AppendEntriesRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendEntriesRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendEntriesRes));
  RequestVote_descriptor_ = file->message_type(3);
  static const int RequestVote_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, candidate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, last_log_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, last_log_term_),
  };
  RequestVote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVote_descriptor_,
      RequestVote::default_instance_,
      RequestVote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVote));
  RequestVoteRes_descriptor_ = file->message_type(4);
  static const int RequestVoteRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRes, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRes, vote_granted_),
  };
  RequestVoteRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVoteRes_descriptor_,
      RequestVoteRes::default_instance_,
      RequestVoteRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVoteRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVoteRes));
  RaftCoreService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntry_descriptor_, &LogEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntries_descriptor_, &AppendEntries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendEntriesRes_descriptor_, &AppendEntriesRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVote_descriptor_, &RequestVote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVoteRes_descriptor_, &RequestVoteRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_2eproto() {
  delete LogEntry::default_instance_;
  delete LogEntry_reflection_;
  delete AppendEntries::default_instance_;
  delete AppendEntries_reflection_;
  delete AppendEntriesRes::default_instance_;
  delete AppendEntriesRes_reflection_;
  delete RequestVote::default_instance_;
  delete RequestVote_reflection_;
  delete RequestVoteRes::default_instance_;
  delete RequestVoteRes_reflection_;
}

void protobuf_AddDesc_raft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nraft.proto\022\010raftcore\"C\n\010LogEntry\022\014\n\004te"
    "rm\030\001 \002(\004\022\013\n\003idx\030\002 \002(\004\022\014\n\004data\030\003 \001(\t\022\016\n\006c"
    "onfig\030\004 \001(\010\"\245\001\n\rAppendEntries\022\014\n\004term\030\001 "
    "\002(\004\022\021\n\tleader_id\030\002 \001(\t\022\024\n\014prev_log_idx\030\003"
    " \001(\004\022\025\n\rprev_log_term\030\004 \001(\004\022#\n\007entries\030\005"
    " \003(\0132\022.raftcore.LogEntry\022\025\n\rleader_commi"
    "t\030\006 \001(\004\022\n\n\002id\030\007 \001(\004\"P\n\020AppendEntriesRes\022"
    "\014\n\004term\030\001 \002(\004\022\017\n\007success\030\002 \002(\010\022\021\n\tmatch_"
    "idx\030\003 \001(\004\022\n\n\002id\030\004 \001(\004\"^\n\013RequestVote\022\014\n\004"
    "term\030\001 \002(\004\022\024\n\014candidate_id\030\002 \001(\t\022\024\n\014last"
    "_log_idx\030\003 \001(\004\022\025\n\rlast_log_term\030\004 \001(\004\"4\n"
    "\016RequestVoteRes\022\014\n\004term\030\001 \002(\004\022\024\n\014vote_gr"
    "anted\030\002 \002(\0102\326\001\n\017RaftCoreService\022;\n\010pre_v"
    "ote\022\025.raftcore.RequestVote\032\030.raftcore.Re"
    "questVoteRes\022\?\n\014request_vote\022\025.raftcore."
    "RequestVote\032\030.raftcore.RequestVoteRes\022E\n"
    "\016append_entries\022\027.raftcore.AppendEntries"
    "\032\032.raftcore.AppendEntriesResB\003\200\001\001", 713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
  LogEntry::default_instance_ = new LogEntry();
  AppendEntries::default_instance_ = new AppendEntries();
  AppendEntriesRes::default_instance_ = new AppendEntriesRes();
  RequestVote::default_instance_ = new RequestVote();
  RequestVoteRes::default_instance_ = new RequestVoteRes();
  LogEntry::default_instance_->InitAsDefaultInstance();
  AppendEntries::default_instance_->InitAsDefaultInstance();
  AppendEntriesRes::default_instance_->InitAsDefaultInstance();
  RequestVote::default_instance_->InitAsDefaultInstance();
  RequestVoteRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_2eproto {
  StaticDescriptorInitializer_raft_2eproto() {
    protobuf_AddDesc_raft_2eproto();
  }
} static_descriptor_initializer_raft_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogEntry::kTermFieldNumber;
const int LogEntry::kIdxFieldNumber;
const int LogEntry::kDataFieldNumber;
const int LogEntry::kConfigFieldNumber;
#endif  // !_MSC_VER

LogEntry::LogEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftcore.LogEntry)
}

void LogEntry::InitAsDefaultInstance() {
}

LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raftcore.LogEntry)
}

void LogEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  idx_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raftcore.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntry_descriptor_;
}

const LogEntry& LogEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

LogEntry* LogEntry::default_instance_ = NULL;

LogEntry* LogEntry::New() const {
  return new LogEntry;
}

void LogEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(term_, idx_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    config_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftcore.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // required uint64 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_config;
        break;
      }

      // optional bool config = 4;
      case 4: {
        if (tag == 32) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftcore.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftcore.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftcore.LogEntry)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required uint64 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->idx(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // optional bool config = 4;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftcore.LogEntry)
}

::google::protobuf::uint8* LogEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftcore.LogEntry)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required uint64 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->idx(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // optional bool config = 4;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftcore.LogEntry)
  return target;
}

int LogEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required uint64 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idx());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional bool config = 4;
    if (has_config()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(idx_, other->idx_);
    std::swap(data_, other->data_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntry_descriptor_;
  metadata.reflection = LogEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntries::kTermFieldNumber;
const int AppendEntries::kLeaderIdFieldNumber;
const int AppendEntries::kPrevLogIdxFieldNumber;
const int AppendEntries::kPrevLogTermFieldNumber;
const int AppendEntries::kEntriesFieldNumber;
const int AppendEntries::kLeaderCommitFieldNumber;
const int AppendEntries::kIdFieldNumber;
#endif  // !_MSC_VER

AppendEntries::AppendEntries()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftcore.AppendEntries)
}

void AppendEntries::InitAsDefaultInstance() {
}

AppendEntries::AppendEntries(const AppendEntries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raftcore.AppendEntries)
}

void AppendEntries::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prev_log_idx_ = GOOGLE_ULONGLONG(0);
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  leader_commit_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntries::~AppendEntries() {
  // @@protoc_insertion_point(destructor:raftcore.AppendEntries)
  SharedDtor();
}

void AppendEntries::SharedDtor() {
  if (leader_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_id_;
  }
  if (this != default_instance_) {
  }
}

void AppendEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntries_descriptor_;
}

const AppendEntries& AppendEntries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

AppendEntries* AppendEntries::default_instance_ = NULL;

AppendEntries* AppendEntries::New() const {
  return new AppendEntries;
}

void AppendEntries::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntries*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(prev_log_idx_, prev_log_term_);
    ZR_(leader_commit_, id_);
    term_ = GOOGLE_ULONGLONG(0);
    if (has_leader_id()) {
      if (leader_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftcore.AppendEntries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_id;
        break;
      }

      // optional string leader_id = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_prev_log_idx;
        break;
      }

      // optional uint64 prev_log_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_prev_log_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_idx_)));
          set_has_prev_log_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_term;
        break;
      }

      // optional uint64 prev_log_term = 4;
      case 4: {
        if (tag == 32) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        break;
      }

      // repeated .raftcore.LogEntry entries = 5;
      case 5: {
        if (tag == 42) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        if (input->ExpectTag(48)) goto parse_leader_commit;
        break;
      }

      // optional uint64 leader_commit = 6;
      case 6: {
        if (tag == 48) {
         parse_leader_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_commit_)));
          set_has_leader_commit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_id;
        break;
      }

      // optional uint64 id = 7;
      case 7: {
        if (tag == 56) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftcore.AppendEntries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftcore.AppendEntries)
  return false;
#undef DO_
}

void AppendEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftcore.AppendEntries)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_id(), output);
  }

  // optional uint64 prev_log_idx = 3;
  if (has_prev_log_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prev_log_idx(), output);
  }

  // optional uint64 prev_log_term = 4;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_term(), output);
  }

  // repeated .raftcore.LogEntry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries(i), output);
  }

  // optional uint64 leader_commit = 6;
  if (has_leader_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader_commit(), output);
  }

  // optional uint64 id = 7;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftcore.AppendEntries)
}

::google::protobuf::uint8* AppendEntries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftcore.AppendEntries)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional string leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_id(), target);
  }

  // optional uint64 prev_log_idx = 3;
  if (has_prev_log_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prev_log_idx(), target);
  }

  // optional uint64 prev_log_term = 4;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_term(), target);
  }

  // repeated .raftcore.LogEntry entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries(i), target);
  }

  // optional uint64 leader_commit = 6;
  if (has_leader_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader_commit(), target);
  }

  // optional uint64 id = 7;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftcore.AppendEntries)
  return target;
}

int AppendEntries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional string leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_id());
    }

    // optional uint64 prev_log_idx = 3;
    if (has_prev_log_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_idx());
    }

    // optional uint64 prev_log_term = 4;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prev_log_term());
    }

    // optional uint64 leader_commit = 6;
    if (has_leader_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_commit());
    }

    // optional uint64 id = 7;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .raftcore.LogEntry entries = 5;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntries::MergeFrom(const AppendEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_prev_log_idx()) {
      set_prev_log_idx(from.prev_log_idx());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_leader_commit()) {
      set_leader_commit(from.leader_commit());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntries::CopyFrom(const AppendEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void AppendEntries::Swap(AppendEntries* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(prev_log_idx_, other->prev_log_idx_);
    std::swap(prev_log_term_, other->prev_log_term_);
    entries_.Swap(&other->entries_);
    std::swap(leader_commit_, other->leader_commit_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntries_descriptor_;
  metadata.reflection = AppendEntries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendEntriesRes::kTermFieldNumber;
const int AppendEntriesRes::kSuccessFieldNumber;
const int AppendEntriesRes::kMatchIdxFieldNumber;
const int AppendEntriesRes::kIdFieldNumber;
#endif  // !_MSC_VER

AppendEntriesRes::AppendEntriesRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftcore.AppendEntriesRes)
}

void AppendEntriesRes::InitAsDefaultInstance() {
}

AppendEntriesRes::AppendEntriesRes(const AppendEntriesRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raftcore.AppendEntriesRes)
}

void AppendEntriesRes::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  match_idx_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendEntriesRes::~AppendEntriesRes() {
  // @@protoc_insertion_point(destructor:raftcore.AppendEntriesRes)
  SharedDtor();
}

void AppendEntriesRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppendEntriesRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendEntriesRes_descriptor_;
}

const AppendEntriesRes& AppendEntriesRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

AppendEntriesRes* AppendEntriesRes::default_instance_ = NULL;

AppendEntriesRes* AppendEntriesRes::New() const {
  return new AppendEntriesRes;
}

void AppendEntriesRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppendEntriesRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, success_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendEntriesRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftcore.AppendEntriesRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (tag == 16) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_match_idx;
        break;
      }

      // optional uint64 match_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_match_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_idx_)));
          set_has_match_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftcore.AppendEntriesRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftcore.AppendEntriesRes)
  return false;
#undef DO_
}

void AppendEntriesRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftcore.AppendEntriesRes)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 match_idx = 3;
  if (has_match_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_idx(), output);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftcore.AppendEntriesRes)
}

::google::protobuf::uint8* AppendEntriesRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftcore.AppendEntriesRes)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 match_idx = 3;
  if (has_match_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_idx(), target);
  }

  // optional uint64 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftcore.AppendEntriesRes)
  return target;
}

int AppendEntriesRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 match_idx = 3;
    if (has_match_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_idx());
    }

    // optional uint64 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendEntriesRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendEntriesRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendEntriesRes::MergeFrom(const AppendEntriesRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_match_idx()) {
      set_match_idx(from.match_idx());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendEntriesRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRes::CopyFrom(const AppendEntriesRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppendEntriesRes::Swap(AppendEntriesRes* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(success_, other->success_);
    std::swap(match_idx_, other->match_idx_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendEntriesRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendEntriesRes_descriptor_;
  metadata.reflection = AppendEntriesRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVote::kTermFieldNumber;
const int RequestVote::kCandidateIdFieldNumber;
const int RequestVote::kLastLogIdxFieldNumber;
const int RequestVote::kLastLogTermFieldNumber;
#endif  // !_MSC_VER

RequestVote::RequestVote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftcore.RequestVote)
}

void RequestVote::InitAsDefaultInstance() {
}

RequestVote::RequestVote(const RequestVote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raftcore.RequestVote)
}

void RequestVote::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  candidate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_log_idx_ = GOOGLE_ULONGLONG(0);
  last_log_term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVote::~RequestVote() {
  // @@protoc_insertion_point(destructor:raftcore.RequestVote)
  SharedDtor();
}

void RequestVote::SharedDtor() {
  if (candidate_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete candidate_id_;
  }
  if (this != default_instance_) {
  }
}

void RequestVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVote_descriptor_;
}

const RequestVote& RequestVote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

RequestVote* RequestVote::default_instance_ = NULL;

RequestVote* RequestVote::New() const {
  return new RequestVote;
}

void RequestVote::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVote*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(last_log_idx_, last_log_term_);
    term_ = GOOGLE_ULONGLONG(0);
    if (has_candidate_id()) {
      if (candidate_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        candidate_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftcore.RequestVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_candidate_id;
        break;
      }

      // optional string candidate_id = 2;
      case 2: {
        if (tag == 18) {
         parse_candidate_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->candidate_id().data(), this->candidate_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "candidate_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_log_idx;
        break;
      }

      // optional uint64 last_log_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_last_log_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_idx_)));
          set_has_last_log_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_log_term;
        break;
      }

      // optional uint64 last_log_term = 4;
      case 4: {
        if (tag == 32) {
         parse_last_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
          set_has_last_log_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftcore.RequestVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftcore.RequestVote)
  return false;
#undef DO_
}

void RequestVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftcore.RequestVote)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // optional string candidate_id = 2;
  if (has_candidate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->candidate_id().data(), this->candidate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "candidate_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->candidate_id(), output);
  }

  // optional uint64 last_log_idx = 3;
  if (has_last_log_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_idx(), output);
  }

  // optional uint64 last_log_term = 4;
  if (has_last_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftcore.RequestVote)
}

::google::protobuf::uint8* RequestVote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftcore.RequestVote)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // optional string candidate_id = 2;
  if (has_candidate_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->candidate_id().data(), this->candidate_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "candidate_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->candidate_id(), target);
  }

  // optional uint64 last_log_idx = 3;
  if (has_last_log_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_idx(), target);
  }

  // optional uint64 last_log_term = 4;
  if (has_last_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftcore.RequestVote)
  return target;
}

int RequestVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional string candidate_id = 2;
    if (has_candidate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->candidate_id());
    }

    // optional uint64 last_log_idx = 3;
    if (has_last_log_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_idx());
    }

    // optional uint64 last_log_term = 4;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_log_term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVote::MergeFrom(const RequestVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_candidate_id()) {
      set_candidate_id(from.candidate_id());
    }
    if (from.has_last_log_idx()) {
      set_last_log_idx(from.last_log_idx());
    }
    if (from.has_last_log_term()) {
      set_last_log_term(from.last_log_term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVote::CopyFrom(const RequestVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestVote::Swap(RequestVote* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(candidate_id_, other->candidate_id_);
    std::swap(last_log_idx_, other->last_log_idx_);
    std::swap(last_log_term_, other->last_log_term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVote_descriptor_;
  metadata.reflection = RequestVote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVoteRes::kTermFieldNumber;
const int RequestVoteRes::kVoteGrantedFieldNumber;
#endif  // !_MSC_VER

RequestVoteRes::RequestVoteRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raftcore.RequestVoteRes)
}

void RequestVoteRes::InitAsDefaultInstance() {
}

RequestVoteRes::RequestVoteRes(const RequestVoteRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raftcore.RequestVoteRes)
}

void RequestVoteRes::SharedCtor() {
  _cached_size_ = 0;
  term_ = GOOGLE_ULONGLONG(0);
  vote_granted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVoteRes::~RequestVoteRes() {
  // @@protoc_insertion_point(destructor:raftcore.RequestVoteRes)
  SharedDtor();
}

void RequestVoteRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestVoteRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVoteRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVoteRes_descriptor_;
}

const RequestVoteRes& RequestVoteRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

RequestVoteRes* RequestVoteRes::default_instance_ = NULL;

RequestVoteRes* RequestVoteRes::New() const {
  return new RequestVoteRes;
}

void RequestVoteRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestVoteRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(term_, vote_granted_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVoteRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raftcore.RequestVoteRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 term = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vote_granted;
        break;
      }

      // required bool vote_granted = 2;
      case 2: {
        if (tag == 16) {
         parse_vote_granted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
          set_has_vote_granted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raftcore.RequestVoteRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raftcore.RequestVoteRes)
  return false;
#undef DO_
}

void RequestVoteRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raftcore.RequestVoteRes)
  // required uint64 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // required bool vote_granted = 2;
  if (has_vote_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_granted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raftcore.RequestVoteRes)
}

::google::protobuf::uint8* RequestVoteRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raftcore.RequestVoteRes)
  // required uint64 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // required bool vote_granted = 2;
  if (has_vote_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->vote_granted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raftcore.RequestVoteRes)
  return target;
}

int RequestVoteRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // required bool vote_granted = 2;
    if (has_vote_granted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVoteRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVoteRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVoteRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVoteRes::MergeFrom(const RequestVoteRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_vote_granted()) {
      set_vote_granted(from.vote_granted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVoteRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteRes::CopyFrom(const RequestVoteRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestVoteRes::Swap(RequestVoteRes* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(vote_granted_, other->vote_granted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVoteRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVoteRes_descriptor_;
  metadata.reflection = RequestVoteRes_reflection_;
  return metadata;
}


// ===================================================================

RaftCoreService::~RaftCoreService() {}

const ::google::protobuf::ServiceDescriptor* RaftCoreService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCoreService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RaftCoreService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCoreService_descriptor_;
}

void RaftCoreService::pre_vote(::google::protobuf::RpcController* controller,
                         const ::raftcore::RequestVote*,
                         ::raftcore::RequestVoteRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method pre_vote() not implemented.");
  done->Run();
}

void RaftCoreService::request_vote(::google::protobuf::RpcController* controller,
                         const ::raftcore::RequestVote*,
                         ::raftcore::RequestVoteRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method request_vote() not implemented.");
  done->Run();
}

void RaftCoreService::append_entries(::google::protobuf::RpcController* controller,
                         const ::raftcore::AppendEntries*,
                         ::raftcore::AppendEntriesRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method append_entries() not implemented.");
  done->Run();
}

void RaftCoreService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RaftCoreService_descriptor_);
  switch(method->index()) {
    case 0:
      pre_vote(controller,
             ::google::protobuf::down_cast<const ::raftcore::RequestVote*>(request),
             ::google::protobuf::down_cast< ::raftcore::RequestVoteRes*>(response),
             done);
      break;
    case 1:
      request_vote(controller,
             ::google::protobuf::down_cast<const ::raftcore::RequestVote*>(request),
             ::google::protobuf::down_cast< ::raftcore::RequestVoteRes*>(response),
             done);
      break;
    case 2:
      append_entries(controller,
             ::google::protobuf::down_cast<const ::raftcore::AppendEntries*>(request),
             ::google::protobuf::down_cast< ::raftcore::AppendEntriesRes*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftCoreService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftcore::RequestVote::default_instance();
    case 1:
      return ::raftcore::RequestVote::default_instance();
    case 2:
      return ::raftcore::AppendEntries::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RaftCoreService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raftcore::RequestVoteRes::default_instance();
    case 1:
      return ::raftcore::RequestVoteRes::default_instance();
    case 2:
      return ::raftcore::AppendEntriesRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

RaftCoreService_Stub::RaftCoreService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftCoreService_Stub::RaftCoreService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftCoreService_Stub::~RaftCoreService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftCoreService_Stub::pre_vote(::google::protobuf::RpcController* controller,
                              const ::raftcore::RequestVote* request,
                              ::raftcore::RequestVoteRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftCoreService_Stub::request_vote(::google::protobuf::RpcController* controller,
                              const ::raftcore::RequestVote* request,
                              ::raftcore::RequestVoteRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftCoreService_Stub::append_entries(::google::protobuf::RpcController* controller,
                              const ::raftcore::AppendEntries* request,
                              ::raftcore::AppendEntriesRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace raftcore

// @@protoc_insertion_point(global_scope)
