// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_raft_2eproto__INCLUDED
#define PROTOBUF_raft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace raftcore {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_2eproto();
void protobuf_AssignDesc_raft_2eproto();
void protobuf_ShutdownFile_raft_2eproto();

class LogEntry;
class AppendEntries;
class AppendEntriesRes;
class RequestVote;
class RequestVoteRes;

// ===================================================================

class LogEntry : public ::google::protobuf::Message {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  LogEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required uint64 idx = 2;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 2;
  inline ::google::protobuf::uint64 idx() const;
  inline void set_idx(::google::protobuf::uint64 value);

  // optional string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional bool config = 4;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 4;
  inline bool config() const;
  inline void set_config(bool value);

  // @@protoc_insertion_point(class_scope:raftcore.LogEntry)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 idx_;
  ::std::string* data_;
  bool config_;
  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntries : public ::google::protobuf::Message {
 public:
  AppendEntries();
  virtual ~AppendEntries();

  AppendEntries(const AppendEntries& from);

  inline AppendEntries& operator=(const AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntries& default_instance();

  void Swap(AppendEntries* other);

  // implements Message ----------------------------------------------

  AppendEntries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntries& from);
  void MergeFrom(const AppendEntries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // optional string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  inline void set_allocated_leader_id(::std::string* leader_id);

  // optional uint64 prev_log_idx = 3;
  inline bool has_prev_log_idx() const;
  inline void clear_prev_log_idx();
  static const int kPrevLogIdxFieldNumber = 3;
  inline ::google::protobuf::uint64 prev_log_idx() const;
  inline void set_prev_log_idx(::google::protobuf::uint64 value);

  // optional uint64 prev_log_term = 4;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  inline ::google::protobuf::uint64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::uint64 value);

  // repeated .raftcore.LogEntry entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::raftcore::LogEntry& entries(int index) const;
  inline ::raftcore::LogEntry* mutable_entries(int index);
  inline ::raftcore::LogEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::raftcore::LogEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::raftcore::LogEntry >*
      mutable_entries();

  // optional uint64 leader_commit = 6;
  inline bool has_leader_commit() const;
  inline void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 6;
  inline ::google::protobuf::uint64 leader_commit() const;
  inline void set_leader_commit(::google::protobuf::uint64 value);

  // optional uint64 id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raftcore.AppendEntries)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_prev_log_idx();
  inline void clear_has_prev_log_idx();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_leader_commit();
  inline void clear_has_leader_commit();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::std::string* leader_id_;
  ::google::protobuf::uint64 prev_log_idx_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::RepeatedPtrField< ::raftcore::LogEntry > entries_;
  ::google::protobuf::uint64 leader_commit_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntries* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesRes : public ::google::protobuf::Message {
 public:
  AppendEntriesRes();
  virtual ~AppendEntriesRes();

  AppendEntriesRes(const AppendEntriesRes& from);

  inline AppendEntriesRes& operator=(const AppendEntriesRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRes& default_instance();

  void Swap(AppendEntriesRes* other);

  // implements Message ----------------------------------------------

  AppendEntriesRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesRes& from);
  void MergeFrom(const AppendEntriesRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint64 match_idx = 3;
  inline bool has_match_idx() const;
  inline void clear_match_idx();
  static const int kMatchIdxFieldNumber = 3;
  inline ::google::protobuf::uint64 match_idx() const;
  inline void set_match_idx(::google::protobuf::uint64 value);

  // optional uint64 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raftcore.AppendEntriesRes)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_match_idx();
  inline void clear_has_match_idx();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 match_idx_;
  ::google::protobuf::uint64 id_;
  bool success_;
  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static AppendEntriesRes* default_instance_;
};
// -------------------------------------------------------------------

class RequestVote : public ::google::protobuf::Message {
 public:
  RequestVote();
  virtual ~RequestVote();

  RequestVote(const RequestVote& from);

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVote& default_instance();

  void Swap(RequestVote* other);

  // implements Message ----------------------------------------------

  RequestVote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVote& from);
  void MergeFrom(const RequestVote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // optional string candidate_id = 2;
  inline bool has_candidate_id() const;
  inline void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  inline const ::std::string& candidate_id() const;
  inline void set_candidate_id(const ::std::string& value);
  inline void set_candidate_id(const char* value);
  inline void set_candidate_id(const char* value, size_t size);
  inline ::std::string* mutable_candidate_id();
  inline ::std::string* release_candidate_id();
  inline void set_allocated_candidate_id(::std::string* candidate_id);

  // optional uint64 last_log_idx = 3;
  inline bool has_last_log_idx() const;
  inline void clear_last_log_idx();
  static const int kLastLogIdxFieldNumber = 3;
  inline ::google::protobuf::uint64 last_log_idx() const;
  inline void set_last_log_idx(::google::protobuf::uint64 value);

  // optional uint64 last_log_term = 4;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  inline ::google::protobuf::uint64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::uint64 value);

  // optional bool early_vote = 5;
  inline bool has_early_vote() const;
  inline void clear_early_vote();
  static const int kEarlyVoteFieldNumber = 5;
  inline bool early_vote() const;
  inline void set_early_vote(bool value);

  // @@protoc_insertion_point(class_scope:raftcore.RequestVote)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_candidate_id();
  inline void clear_has_candidate_id();
  inline void set_has_last_log_idx();
  inline void clear_has_last_log_idx();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  inline void set_has_early_vote();
  inline void clear_has_early_vote();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  ::std::string* candidate_id_;
  ::google::protobuf::uint64 last_log_idx_;
  ::google::protobuf::uint64 last_log_term_;
  bool early_vote_;
  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static RequestVote* default_instance_;
};
// -------------------------------------------------------------------

class RequestVoteRes : public ::google::protobuf::Message {
 public:
  RequestVoteRes();
  virtual ~RequestVoteRes();

  RequestVoteRes(const RequestVoteRes& from);

  inline RequestVoteRes& operator=(const RequestVoteRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteRes& default_instance();

  void Swap(RequestVoteRes* other);

  // implements Message ----------------------------------------------

  RequestVoteRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestVoteRes& from);
  void MergeFrom(const RequestVoteRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // required bool vote_granted = 2;
  inline bool has_vote_granted() const;
  inline void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  inline bool vote_granted() const;
  inline void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:raftcore.RequestVoteRes)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_vote_granted();
  inline void clear_has_vote_granted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 term_;
  bool vote_granted_;
  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static RequestVoteRes* default_instance_;
};
// ===================================================================

class RaftCoreService_Stub;

class RaftCoreService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftCoreService() {};
 public:
  virtual ~RaftCoreService();

  typedef RaftCoreService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void timeout_now(::google::protobuf::RpcController* controller,
                       const ::raftcore::RequestVote* request,
                       ::raftcore::RequestVoteRes* response,
                       ::google::protobuf::Closure* done);
  virtual void pre_vote(::google::protobuf::RpcController* controller,
                       const ::raftcore::RequestVote* request,
                       ::raftcore::RequestVoteRes* response,
                       ::google::protobuf::Closure* done);
  virtual void request_vote(::google::protobuf::RpcController* controller,
                       const ::raftcore::RequestVote* request,
                       ::raftcore::RequestVoteRes* response,
                       ::google::protobuf::Closure* done);
  virtual void append_entries(::google::protobuf::RpcController* controller,
                       const ::raftcore::AppendEntries* request,
                       ::raftcore::AppendEntriesRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftCoreService);
};

class RaftCoreService_Stub : public RaftCoreService {
 public:
  RaftCoreService_Stub(::google::protobuf::RpcChannel* channel);
  RaftCoreService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RaftCoreService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RaftCoreService ------------------------------------------

  void timeout_now(::google::protobuf::RpcController* controller,
                       const ::raftcore::RequestVote* request,
                       ::raftcore::RequestVoteRes* response,
                       ::google::protobuf::Closure* done);
  void pre_vote(::google::protobuf::RpcController* controller,
                       const ::raftcore::RequestVote* request,
                       ::raftcore::RequestVoteRes* response,
                       ::google::protobuf::Closure* done);
  void request_vote(::google::protobuf::RpcController* controller,
                       const ::raftcore::RequestVote* request,
                       ::raftcore::RequestVoteRes* response,
                       ::google::protobuf::Closure* done);
  void append_entries(::google::protobuf::RpcController* controller,
                       const ::raftcore::AppendEntries* request,
                       ::raftcore::AppendEntriesRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftCoreService_Stub);
};


// ===================================================================


// ===================================================================

// LogEntry

// required uint64 term = 1;
inline bool LogEntry::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogEntry::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogEntry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:raftcore.LogEntry.term)
  return term_;
}
inline void LogEntry::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.LogEntry.term)
}

// required uint64 idx = 2;
inline bool LogEntry::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogEntry::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogEntry::clear_idx() {
  idx_ = GOOGLE_ULONGLONG(0);
  clear_has_idx();
}
inline ::google::protobuf::uint64 LogEntry::idx() const {
  // @@protoc_insertion_point(field_get:raftcore.LogEntry.idx)
  return idx_;
}
inline void LogEntry::set_idx(::google::protobuf::uint64 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:raftcore.LogEntry.idx)
}

// optional string data = 3;
inline bool LogEntry::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogEntry::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& LogEntry::data() const {
  // @@protoc_insertion_point(field_get:raftcore.LogEntry.data)
  return *data_;
}
inline void LogEntry::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:raftcore.LogEntry.data)
}
inline void LogEntry::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:raftcore.LogEntry.data)
}
inline void LogEntry::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raftcore.LogEntry.data)
}
inline ::std::string* LogEntry::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raftcore.LogEntry.data)
  return data_;
}
inline ::std::string* LogEntry::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogEntry::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raftcore.LogEntry.data)
}

// optional bool config = 4;
inline bool LogEntry::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogEntry::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogEntry::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogEntry::clear_config() {
  config_ = false;
  clear_has_config();
}
inline bool LogEntry::config() const {
  // @@protoc_insertion_point(field_get:raftcore.LogEntry.config)
  return config_;
}
inline void LogEntry::set_config(bool value) {
  set_has_config();
  config_ = value;
  // @@protoc_insertion_point(field_set:raftcore.LogEntry.config)
}

// -------------------------------------------------------------------

// AppendEntries

// required uint64 term = 1;
inline bool AppendEntries::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntries::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntries::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntries::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendEntries::term() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.term)
  return term_;
}
inline void AppendEntries::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntries.term)
}

// optional string leader_id = 2;
inline bool AppendEntries::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntries::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntries::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntries::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& AppendEntries::leader_id() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.leader_id)
  return *leader_id_;
}
inline void AppendEntries::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
  // @@protoc_insertion_point(field_set:raftcore.AppendEntries.leader_id)
}
inline void AppendEntries::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:raftcore.AppendEntries.leader_id)
}
inline void AppendEntries::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raftcore.AppendEntries.leader_id)
}
inline ::std::string* AppendEntries::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raftcore.AppendEntries.leader_id)
  return leader_id_;
}
inline ::std::string* AppendEntries::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppendEntries::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_id_;
  }
  if (leader_id) {
    set_has_leader_id();
    leader_id_ = leader_id;
  } else {
    clear_has_leader_id();
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raftcore.AppendEntries.leader_id)
}

// optional uint64 prev_log_idx = 3;
inline bool AppendEntries::has_prev_log_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntries::set_has_prev_log_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntries::clear_has_prev_log_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntries::clear_prev_log_idx() {
  prev_log_idx_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_idx();
}
inline ::google::protobuf::uint64 AppendEntries::prev_log_idx() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.prev_log_idx)
  return prev_log_idx_;
}
inline void AppendEntries::set_prev_log_idx(::google::protobuf::uint64 value) {
  set_has_prev_log_idx();
  prev_log_idx_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntries.prev_log_idx)
}

// optional uint64 prev_log_term = 4;
inline bool AppendEntries::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntries::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntries::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntries::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::uint64 AppendEntries::prev_log_term() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntries::set_prev_log_term(::google::protobuf::uint64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntries.prev_log_term)
}

// repeated .raftcore.LogEntry entries = 5;
inline int AppendEntries::entries_size() const {
  return entries_.size();
}
inline void AppendEntries::clear_entries() {
  entries_.Clear();
}
inline const ::raftcore::LogEntry& AppendEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.entries)
  return entries_.Get(index);
}
inline ::raftcore::LogEntry* AppendEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raftcore.AppendEntries.entries)
  return entries_.Mutable(index);
}
inline ::raftcore::LogEntry* AppendEntries::add_entries() {
  // @@protoc_insertion_point(field_add:raftcore.AppendEntries.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raftcore::LogEntry >&
AppendEntries::entries() const {
  // @@protoc_insertion_point(field_list:raftcore.AppendEntries.entries)
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::raftcore::LogEntry >*
AppendEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raftcore.AppendEntries.entries)
  return &entries_;
}

// optional uint64 leader_commit = 6;
inline bool AppendEntries::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntries::set_has_leader_commit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppendEntries::clear_has_leader_commit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppendEntries::clear_leader_commit() {
  leader_commit_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_commit();
}
inline ::google::protobuf::uint64 AppendEntries::leader_commit() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.leader_commit)
  return leader_commit_;
}
inline void AppendEntries::set_leader_commit(::google::protobuf::uint64 value) {
  set_has_leader_commit();
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntries.leader_commit)
}

// optional uint64 id = 7;
inline bool AppendEntries::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppendEntries::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppendEntries::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppendEntries::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AppendEntries::id() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntries.id)
  return id_;
}
inline void AppendEntries::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntries.id)
}

// -------------------------------------------------------------------

// AppendEntriesRes

// required uint64 term = 1;
inline bool AppendEntriesRes::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRes::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesRes::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesRes::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 AppendEntriesRes::term() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntriesRes.term)
  return term_;
}
inline void AppendEntriesRes::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntriesRes.term)
}

// required bool success = 2;
inline bool AppendEntriesRes::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRes::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesRes::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesRes::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntriesRes::success() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntriesRes.success)
  return success_;
}
inline void AppendEntriesRes::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntriesRes.success)
}

// optional uint64 match_idx = 3;
inline bool AppendEntriesRes::has_match_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRes::set_has_match_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesRes::clear_has_match_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesRes::clear_match_idx() {
  match_idx_ = GOOGLE_ULONGLONG(0);
  clear_has_match_idx();
}
inline ::google::protobuf::uint64 AppendEntriesRes::match_idx() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntriesRes.match_idx)
  return match_idx_;
}
inline void AppendEntriesRes::set_match_idx(::google::protobuf::uint64 value) {
  set_has_match_idx();
  match_idx_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntriesRes.match_idx)
}

// optional uint64 id = 4;
inline bool AppendEntriesRes::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRes::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesRes::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AppendEntriesRes::id() const {
  // @@protoc_insertion_point(field_get:raftcore.AppendEntriesRes.id)
  return id_;
}
inline void AppendEntriesRes::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:raftcore.AppendEntriesRes.id)
}

// -------------------------------------------------------------------

// RequestVote

// required uint64 term = 1;
inline bool RequestVote::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVote::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVote::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVote::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RequestVote::term() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVote.term)
  return term_;
}
inline void RequestVote::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.RequestVote.term)
}

// optional string candidate_id = 2;
inline bool RequestVote::has_candidate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVote::set_has_candidate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVote::clear_has_candidate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVote::clear_candidate_id() {
  if (candidate_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_id_->clear();
  }
  clear_has_candidate_id();
}
inline const ::std::string& RequestVote::candidate_id() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVote.candidate_id)
  return *candidate_id_;
}
inline void RequestVote::set_candidate_id(const ::std::string& value) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(value);
  // @@protoc_insertion_point(field_set:raftcore.RequestVote.candidate_id)
}
inline void RequestVote::set_candidate_id(const char* value) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:raftcore.RequestVote.candidate_id)
}
inline void RequestVote::set_candidate_id(const char* value, size_t size) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raftcore.RequestVote.candidate_id)
}
inline ::std::string* RequestVote::mutable_candidate_id() {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    candidate_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:raftcore.RequestVote.candidate_id)
  return candidate_id_;
}
inline ::std::string* RequestVote::release_candidate_id() {
  clear_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = candidate_id_;
    candidate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RequestVote::set_allocated_candidate_id(::std::string* candidate_id) {
  if (candidate_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete candidate_id_;
  }
  if (candidate_id) {
    set_has_candidate_id();
    candidate_id_ = candidate_id;
  } else {
    clear_has_candidate_id();
    candidate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:raftcore.RequestVote.candidate_id)
}

// optional uint64 last_log_idx = 3;
inline bool RequestVote::has_last_log_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVote::set_has_last_log_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVote::clear_has_last_log_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVote::clear_last_log_idx() {
  last_log_idx_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_idx();
}
inline ::google::protobuf::uint64 RequestVote::last_log_idx() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVote.last_log_idx)
  return last_log_idx_;
}
inline void RequestVote::set_last_log_idx(::google::protobuf::uint64 value) {
  set_has_last_log_idx();
  last_log_idx_ = value;
  // @@protoc_insertion_point(field_set:raftcore.RequestVote.last_log_idx)
}

// optional uint64 last_log_term = 4;
inline bool RequestVote::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVote::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestVote::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestVote::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::uint64 RequestVote::last_log_term() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVote.last_log_term)
  return last_log_term_;
}
inline void RequestVote::set_last_log_term(::google::protobuf::uint64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.RequestVote.last_log_term)
}

// optional bool early_vote = 5;
inline bool RequestVote::has_early_vote() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVote::set_has_early_vote() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestVote::clear_has_early_vote() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestVote::clear_early_vote() {
  early_vote_ = false;
  clear_has_early_vote();
}
inline bool RequestVote::early_vote() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVote.early_vote)
  return early_vote_;
}
inline void RequestVote::set_early_vote(bool value) {
  set_has_early_vote();
  early_vote_ = value;
  // @@protoc_insertion_point(field_set:raftcore.RequestVote.early_vote)
}

// -------------------------------------------------------------------

// RequestVoteRes

// required uint64 term = 1;
inline bool RequestVoteRes::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteRes::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteRes::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteRes::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RequestVoteRes::term() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVoteRes.term)
  return term_;
}
inline void RequestVoteRes::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:raftcore.RequestVoteRes.term)
}

// required bool vote_granted = 2;
inline bool RequestVoteRes::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteRes::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteRes::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteRes::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool RequestVoteRes::vote_granted() const {
  // @@protoc_insertion_point(field_get:raftcore.RequestVoteRes.vote_granted)
  return vote_granted_;
}
inline void RequestVoteRes::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:raftcore.RequestVoteRes.vote_granted)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftcore

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2eproto__INCLUDED
